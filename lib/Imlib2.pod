=head1 NAME

Imlib2 - Perl 6 interface to the Imlib2 image library.

=head1 DESCRIPTION

Perl6 binding for Imlib2, a featureful and efficient image manipulation
library, which produces high quality, anti-aliased output. You will need
this library installed in order to use Image-Imlib2 (preferably a recent
version).

=head1 SYNOPSIS

	use Imlib2;
	
	my $tools = Imlib2.new();
	# Create a new raw image.
	my $rawimage = $tools.create_image(200, 200);
	exit() unless $rawimage;
	
	# Sets the current image Imlib2 will be using with its function calls.
	$rawimage.context_set_image();
	
	# Sets the color with which text, lines and rectangles are drawn when
	# being rendered onto an image.
	$tools.context_set_color(
	    red   => 255,
	    green => 127,
	    blue  => 0,
	    alpha => 255
	);
	
	$tools.image_fill_rectangle(
	    x      => 0,
	    y      => 0,
	    width  => 200,
	    height => 200
	);
	
	$tools.image_set_format("png");
	unlink("images/test_imlib2.png") if "images/test_imlib2.png".IO ~~ :e;
	$tools.save_image("images/test_imlib2.png");
	
	# Frees the image that is set as the current image in Imlib2's context. 
	$tools.free_image();
	
	exit();

=head1 API REFRENCE

The perl6 API follows closely the C implementation.

=head2 C<context_set_cliprect>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	$tools.context_set_cliprect(
		x      => 0,
		y      => 0,
		width  => 100,
		height => 100);

Parameters:

	Int x - The top left x coordinate of the rectangle. 
	Int y - The top left y coordinate of the rectangle. 
	Int width - The width of the rectangle. 
	Int height - The height of the rectangle. 

Sets the rectangle of the current context.

=head2 C<context_set_dither_mask>

Usage:
	
	use Imlib2;
	my $tools = Imlib2.new();
	my Bool $dither_mask = True;
	$tools.context_set_cliprect($dither_mask);

Parameters:

	Bool $dither_mask - The dither mask flag (True or False).

Selects if, you are rendering to a mask, or producing pixmap masks from
images, if the mask is to be dithered or not. passing in True for
dither_mask means the mask pixmap will be dithered, False means it will
not be dithered.

=head2 C<context_get_dither_mask>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my Bool $dither_mask = $tools.context_get_dither_mask();

Returns:

	Bool $dither_mask - The current dither mask flag (True or False).

Returns the current mode for dithering pixmap masks. True means
dithering is enabled and False means it is not.

=head2 C<context_set_mask_alpha_threshold>

Usage:
	
	use Imlib2;
	my $tools = Imlib2.new();
	my Int $mask_alpha_threshold = 127;
	$tools.context_set_mask_alpha_threshold($mask_alpha_threshold);

Parameters:

	Int $mask_alpha_threshold - The mask alpha threshold (values between 0 and 255).

Selects, if you are rendering to a mask, the alpha threshold above which
mask bits are set. The default mask alpha threshold is 128, meaning that
a mask bit will be set if the pixel alpha is >= 128.

=head2 C<context_get_mask_alpha_threshold>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my Int $mask_alpha_threshold = $tools.context_get_mask_alpha_threshold();

Returns:

	Int $mask_alpha_threshold - The current mask alpha threshold.

The current mask alpha threshold.

=head2 C<context_set_anti_alias>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my Bool $anti_alias = True;
	$tools.context_set_anti_alias($anti_alias);

Parameters:

	Bool $anti_alias - The anti alias flag (True or False).

Toggles "anti-aliased" scaling of images. This isn't quite correct since
it's actually super and sub pixel sampling that it turns on and off, but
anti-aliasing is used for having "smooth" edges to lines and shapes and
this means when images are scaled they will keep their smooth appearance.
Passing in True turns this on and False turns it off.

=head2 C<context_get_anti_alias>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my Bool $anti_alias = $tools.context_get_anti_alias();

Returns:

	Bool $anti_alias - The current anti alias flag (True or False).

Returns if Imlib2 currently will smoothly scale images. True means it
will and False means it will not.

=head2 C<context_set_dither>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my Bool $dither = True;
	$tools.context_set_dither($dither);

Parameters:

	Bool $dither - The dithering flag (True or False).

Sets the dithering flag for rendering to a drawable or when pixmaps are
produced. This affects the color image appearance by enabling dithering.
Dithering slows down rendering but produces considerably better results.
this option has no effect foe rendering in 24 bit and up, but in 16 bit
and lower it will dither, producing smooth gradients and much better
quality images. setting dither to True enables it and False disables it.

=head2 C<context_get_dither>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my Bool $dither = $tools.context_get_dither();

Returns:

	Bool $dither - The current dithering flag (True or False). 

Returns if image data is rendered with dithering currently. True means
yes and False means no.

=head2 C<context_set_blend>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my Bool $blend = true;
	$tools.context_set_blend($blend);

Parameters:

	Bool $blend - The blending flag (True or False).

When rendering an image to a drawable, Imlib2 is able to blend the
image directly onto the drawable during rendering. Setting this to True
will enable this. If the image has no alpha channel this has no effect.
Setting it to False will disable this.

=head2 C<context_get_blend>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my Bool $blend = $tools.context_get_blend();

Returns:

	Bool $blend - The current blending flag (True or False).

Returns if Imlib2 will blend images onto a drawable whilst rendering to
that drawable. True means yes and False means no. 

=head2 C<context_set_color_modifier>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my $color_modifier = $tools.create_color_modifier();
	$color_modifier.context_set_color_modifier();
	$tools.free_color_modifier();

Parameters:

	Imlib2::ColorModifier $color_modifier - Current color modifier.

Sets the current color modifier used for rendering pixmaps or images to
a drawable or images onto other images. Color modifiers are lookup
tables that map the values in the red, green, blue and alpha channels
to other values in the same channel when rendering, allowing for fades,
color correction etc. to be done whilst rendering. pass in NULL as the
color_modifier to disable the color modifier for rendering.

=head2 C<context_get_color_modifier>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my $color_modifier = $tools.context_get_color_modifier();

Returns:

	Imlib2::ColorModifier $color_modifier - The current color modifier.

Returns the current color modifier being used.

=head2 C<context_set_operation>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	$tools.context_set_operation(OP_COPY);

Parameters:

	OperationMode $operation - The current operation mode. 

When Imlib2 draws an image onto another or an image onto a drawable it
is able to do more than just blend the result on using the given alpha
channel of the image. It is also able to do saturating additive,
subtractive and a combination of the both (called reshade) rendering.
The default mode is OP_COPY. you can also set it to OP_ADD, OP_SUBTRACT
or OP_RESHADE. Use this function to set the rendering operation.

=over 4

=item *

OP_COPY performs basic alpha blending: DST = (SRC * A) + (DST * (1 - A)).

=item *

OP_ADD does DST = DST + (SRC * A).

=item *

OP_SUBTRACT does DST = DST - (SRC * A).

=item *

OP_RESHADE does DST = DST + (((SRC - 0.5) / 2) * A).

=back

=head2 C<context_get_operation>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	say "OP_ADD Operation mode" if $tools.context_get_operation() == OP_ADD;

Returns:

	OperationMode $operation - The current operation mode.

Returns the current operation mode.

=head2 C<font.context_set_font>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	$tools.add_path_to_font_path("/usr/share/fonts/corefonts");
	my $corefont = $tools.load_font("comic", 36);
	$corefont.context_set_font();
	$tools.free_font();

Parameters:

	Imlib2::Font $font - Current font. 

Sets the current font to use when rendering text. you should load the
font first with load_font().

=head2 C<context_get_font>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my $font = $tools.context_get_font();

Returns:

	mlib2::Font $font - The current font.

Returns the current font.

=head2 C<context_set_direction>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	$tools.context_set_direction(TEXT_TO_RIGHT);

Parameters:

	TextDirection $text_direction - Text direction.

Sets the direction in which to draw text in terms of simple 90 degree
orientations or an arbitrary angle. The direction can be one of
TEXT_TO_RIGHT, TEXT_TO_LEFT, TEXT_TO_DOWN, TEXT_TO_UP or TEXT_TO_ANGLE.
The default is TEXT_TO_RIGHT. If you use TEXT_TO_ANGLE, you will also
have to set the angle with context_set_angle().

=head2 C<context_get_direction>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	say "TEXT_TO RIGHT is the current direction of the text."
		if $tools.context_get_direction() == TEXT_TO_RIGHT;

Returns:

	TextDirection $text_direction - The current direction of the text.

Returns the current direction to render text in.

=head2 C<context_set_angle>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my Rat $angle = -45.0;
	$tools.context_set_angle($angle);

Parameters:

	Rat $angle - Angle of the text strings.

Sets the angle at which text strings will be drawn if the text direction
has been set to TEXT_TO_ANGLE with context_set_direction().

=head2 C<context_get_angle>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my Rat $angle = $tools.context_get_angle();

Returns:

	Rat $angle - The current angle of the text strings.

Returns the current angle used to render text at if the direction is
TEXT_TO_ANGLE.

=head2 C<context_set_color>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	$tools.context_set_color(
		red   => 127,
		green => 255,
		blue  => 127,
		alpha => 255);

	# Another way to setup the color channels.
	my Str $hexcode = "#ff00ff";
	my Int $alpha = 127;
	$tools.context_set_color($hexcode, $alpha);

Parameters:

	Int red - Red channel of the current color.
	Int green - Green channel of the current color.
	Int blue - Blue channel of the current color.
	Int alpha - Alpha channel of the current color.
	Str $hex_color - The hexadecimal color code ("#FF00FF").

Sets the color with which text, lines and rectangles are drawn when
being rendered onto an image. Values for red, green, blue and alpha
are between 0 and 255 - any other values have undefined results.

=head2 C<context_get_color>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my %color_channels;
	$tools.context_get_color(%color_channels);
	say %color_channels{'red'};
	say %color_channels{'green'};
	say %color_channels{'blue'};
	say %color_channels{'alpha'};
	say %color_channels{'hexcode'};

	# Another way to get the color channels.
	%color_channels = $tools.context_get_color();

Parameters:

	%color_channels - If a hash is passed as argument.
	
Returns:

	%color_channels - Hash with the channels and a hexcode of the
	                  current colors if no argument is passed.

The current color for rendering text, rectangles and lines.

=over 4

=item *

%color_channels{'red'} - Red channel of the current color.

=item *

%color_channels{'green'} - Green channel of the current color.

=item *

%color_channels{'blue'} - Blue channel of the current color.

=item *

%color_channels{'alpha'} - Alpha channel of the current color.

=item *

%color_channels{'hexcode'} - Hexadecimal code of the current color.

=back

=head2 C<context_set_color_hsva>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	$tools.context_set_color_hsva(
		hue        => 180.0,
		saturation => 0.50,
		value      => 0.75,
		alpha      => 127);

Parameters:

	Rat hue - Hue channel of the current color.
	Rat saturation - Saturation channel of the current color.
	Rat value - Value channel of the current color.
	Int alpha - Alpha channel of the current color.

Sets the color in HSVA space. Values for hue are between 0 and 360,
values for saturation and value between 0 and 1, and values for alpha
are between 0 and 255 - any other values have undefined results.

=head2 C<context_get_color_hsva>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my %hsva_channels;
	$tools.context_get_color_hsva(%hsva_channels);
	say "Hue: " ~ %hsva_channels{'hue'};
	say "Saturation: " ~ %hsva_channels{'saturation'};
	say "Value: " ~ %hsva_channels{'value'};
	say "Alpha: " ~ %hsva_channels{'alpha'};

Parameters:

	%hsva_channels - Hash (passed as argument) with the channels of
	                 the current color.

The current color for rendering text, rectangles and lines in HSVA space.

=over 4

=item *

%hsva_channels{'hue'} - Hue channel of the current color.

=item *

%hsva_channels{'saturation'} - Saturation channel of the current color.

=item *

%hsva_channels{'value'} - Value channel of the current color.

=item *

%hsva_channels{'alpha'} - Alpha channel of the current color.

=back

=head2 C<context_set_color_hlsa>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	$tools.context_set_color_hlsa(
		hue        => 180.0,
		lightness  => 0.75,
		saturation => 0.50,
		alpha      => 127);

Parameters:

	Rat hue - Hue channel of the current color.
	Rat lightness - Lightness channel of the current color.
	Rat saturation - Saturation channel of the current color.
	Int alpha - Alpha channel of the current color.

Sets the color in HLSA space. Values for hue are between 0 and 360,
values for lightness and saturation between 0 and 1, and values for
alpha are between 0 and 255 - any other values have undefined results.

=head2 C<context_get_color_hlsa>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my %hlsa_channels;
	$tools.context_get_color_hlsa(%hlsa_channels);
	say "Hue: " ~ %hlsa_channels{'hue'};
	say "Lightness: " ~ %hlsa_channels{'lightness'};
	say "Saturation: " ~ %hlsa_channels{'saturation'};
	say "Alpha: " ~ %hlsa_channels{'alpha'};

Parameters:

	%hlsa_channels - Hash (passed as argument) with the channels of
	                 the current color.

The current color for rendering text, rectangles and lines in HLSA space.

=over 4

=item *

%hlsa_channels{'hue'} - Hue channel of the current color.

=item *

%hlsa_channels{'lightness'} - Lightness channel of the current color.

=item *

%hlsa_channels{'saturation'} - Saturation channel of the current color.

=item *

%hlsa_channels{'alpha'} - Alpha channel of the current color.

=back

=head2 C<context_set_color_cmya>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	$tools.context_set_color_cmya(
		cyan    => 25,
		magenta => 125,
		yellow  => 200,
		alpha   => 255);

Parameters:

	Int cyan - Cyan channel of the current color.
	Int magenta - Magenta channel of the current color.
	Int yellow - Yellow channel of the current color.
	Int alpha - Alpha channel of the current color.

Sets the color in CMYA space. Values for cyan, magenta, yellow and alpha
are between 0 and 255 - any other values have undefined results.

=head2 C<context_get_color_cmya>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my %cmya_channels;
	$tools.context_get_color_cmya(%cmya_channels);
	say "Cyan: " ~ %cmya_channels{'cyan'};
	say "Magenta: " ~ %cmya_channels{'magenta'};
	say "Yellow: " ~ %cmya_channels{'yellow'};
	say "Alpha: " ~ %cmya_channels{'alpha'};

Parameters:

	%cmya_channels - Hash (passed as argument) with the CMYA channels of
	                 the current color.

The current color for rendering text, rectangles and lines in CMYA space.

=over 4

=item *

%cmya_channels{'cyan'} - Cyan channel of the current color.

=item *

%cmya_channels{'magenta'} - Magenta channel of the current color.

=item *

%cmya_channels{'yellow'} - Yellow channel of the current color.

=item *

%cmya_channels{'alpha'} - Alpha channel of the current color.

=back

=head2 C<context_set_color_range>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my $color_range = $tools.create_color_range();
	$color_range.context_set_color_range();
	$tools.free_color_range();

Parameters:

	Imlib2::ColorRange $color_range - Color range.
	
Sets the current color range to use for rendering gradients.

=head2 C<context_get_color_range>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my $color_range = $tools.context_get_color_range();
	
Returns:

	Imlib2::ColorRange $color_range - The current color range.

Returns the current color range being used for gradients.

=head2 C<context_set_image>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my $image = $tools.create_image(100, 200);
	$image.context_set_image();
	$tools.free_image();

Parameters:

	Imlib2::Image $image - Current image.
	
Sets the current image Imlib2 will be using with its function calls.

=head2 C<context_get_image>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my $image = $tools.context_get_image();
	
Returns:

	Imlib2::Image $image - The current image.

Returns the current context image.

=head2 C<set_cache_size>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my $bytes = 2048 * 1024;
	$tools.set_cache_size($bytes);

Parameters:

	Int $bytes - Cache size.

Sets the cache size. The size is in bytes. Setting the cache size to 0
effectively flushes the cache and keeps the cache size at 0 until set
to another value. Whenever you set the cache size Imlib2 will flush as
many old images and pixmap from the cache as needed until the current
cache usage is less than or equal to the cache size.

=head2 C<get_cache_size>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my $bytes = $tools.get_cache_size();

Returns:

	Int $bytes - The current size of the image cache in bytes.

Returns the current size of the image cache in bytes. The cache is a
unified cache used for image data AND pixmaps.

=head2 C<set_color_usage>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my $max = 256;
	$tools.set_color_usage($max);

Parameters:

	Int $max - Maximum number of colors.

Sets the maximum number of colors you would like Imlib2 to allocate for
you when rendering. The default is 256. This has no effect in depths
greater than 8 bit.

=head2 C<get_color_usage>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	my $max = $tools.get_color_usage();

Returns:

	Int $max - The current number of colors.

Gets the number of colors Imlib2 currently at a maximum is allowed to
allocate for rendering. The default is 256.

=head1 AUTHOR

Henrique Dias - L<mrhdias@mail.com>

=head1 SEE ALSO

Imlib2 Library Documentation L<http://docs.enlightenment.org/api/imlib2/html/>

=head1 LICENSE

This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

