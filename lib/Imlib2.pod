=head1 NAME

Imlib2 - Perl 6 interface to the Imlib2 image library.

=head1 DESCRIPTION

Perl6 binding for Imlib2, a featureful and efficient image manipulation
library, which produces high quality, anti-aliased output. You will need
this library installed in order to use Image-Imlib2 (preferably a recent
version).

=head1 SYNOPSIS

	use Imlib2;
	
	my $tools = Imlib2.new();
	# Create a new raw image.
	my $rawimage = $tools.create_image(200, 200);
	exit() unless $rawimage;
	
	# Sets the current image Imlib2 will be using with its function calls.
	$rawimage.context_set_image();
	
	# Sets the color with which text, lines and rectangles are drawn when
	# being rendered onto an image.
	$tools.context_set_color(
	    red   => 255,
	    green => 127,
	    blue  => 0,
	    alpha => 255
	);
	
	$tools.image_fill_rectangle(
	    x      => 0,
	    y      => 0,
	    width  => 200,
	    height => 200
	);
	
	$tools.image_set_format("png");
	unlink("images/test_imlib2.png") if "images/test_imlib2.png".IO ~~ :e;
	$tools.save_image("images/test_imlib2.png");
	
	# Frees the image that is set as the current image in Imlib2's context. 
	$tools.free_image();
	
	exit();

=head1 API REFRENCE

The perl6 API follows closely the C implementation.

=head2 C<context_set_cliprect>

Usage:

	use Imlib2;
	my $tools = Imlib2.new();
	$tools.context_set_cliprect(
		x      => 0,
		y      => 0,
		width  => 100,
		height => 100);

Parameters:

	Int x - The top left x coordinate of the rectangle. 
	Int y - The top left y coordinate of the rectangle. 
	Int width - The width of the rectangle. 
	Int height - The height of the rectangle. 

Sets the rectangle of the current context.

=head2 C<context_set_dither_mask>

Usage:
	
	use Imlib2;
	my $tools = Imlib2.new();
	Bool $dither_mask = True;
	$tools.context_set_cliprect($dither_mask);

Parameters:

	Bool $dither_mask - The dither mask flag (True or False).

Selects if, you are rendering to a mask, or producing pixmap masks from
images, if the mask is to be dithered or not. passing in True for
dither_mask means the mask pixmap will be dithered, False means it will
not be dithered.

=head2 C<Bool $dither_mask = context_get_dither_mask()>

Returns:
=item $dither_mask - The current dither mask flag (True or False).

Returns the current mode for dithering pixmap masks. True means
dithering is enabled and False means it is not.

=head2 C<context_set_mask_alpha_threshold(Int $mask_alpha_threshold where 0..255)>

Parameters:
=item $mask_alpha_threshold - The mask alpha threshold.

Selects, if you are rendering to a mask, the alpha threshold above which
mask bits are set. The default mask alpha threshold is 128, meaning that
a mask bit will be set if the pixel alpha is >= 128.

=head2 C<Int $mask_alpha_threshold = context_get_mask_alpha_threshold()>

Returns:
=item $mask_alpha_threshold - current mask mask alpha threshold.

The current mask mask alpha threshold.

=head2 C<context_set_anti_alias(Bool $anti_alias)>

Parameters:
=item $anti_alias - The anti alias flag (True or False).

Toggles "anti-aliased" scaling of images. This isn't quite correct since
it's actually super and sub pixel sampling that it turns on and off, but
anti-aliasing is used for having "smooth" edges to lines and shapes and
this means when images are scaled they will keep their smooth appearance.
Passing in True turns this on and False turns it off.

=head2 C<Bool $anti_alias = context_get_anti_alias()>

Returns:
=item $anti_alias - The current anti alias flag (True or False).

Returns if Imlib2 currently will smoothly scale images. True means it
will and False means it will not.

=head2 C<context_set_dither(Bool $dither)>

Parameters:
=item $dither - The dithering flag (True or False).

Sets the dithering flag for rendering to a drawable or when pixmaps are
produced. This affects the color image appearance by enabling dithering.
Dithering slows down rendering but produces considerably better results.
this option has no effect foe rendering in 24 bit and up, but in 16 bit
and lower it will dither, producing smooth gradients and much better
quality images. setting dither to True enables it and False disables it.

=head2 C<Bool $dither = context_get_dither()>

Returns:
=item $dither - The current dithering flag (True or False). 

Returns if image data is rendered with dithering currently. True means
yes and False means no.

=head2 C<context_set_blend(Bool $blend)>

Parameters:
=item $blend - The blending flag (True or False).

When rendering an image to a drawable, Imlib2 is able to blend the
image directly onto the drawable during rendering. Setting this to True
will enable this. If the image has no alpha channel this has no effect.
Setting it to False will disable this.

=head2 C<Bool $blend = context_get_blend()>

Returns:
=item $blend - The current blending flag (True or False).

Returns if Imlib2 will blend images onto a drawable whilst rendering to
that drawable. True means yes and False means no. 

=head2 C<context_set_color_modifier(Imlib2::ColorModifier $color_modifier)>

Parameters:
=item $color_modifier - Current color modifier.

Sets the current color modifier used for rendering pixmaps or images to
a drawable or images onto other images. Color modifiers are lookup
tables that map the values in the red, green, blue and alpha channels
to other values in the same channel when rendering, allowing for fades,
color correction etc. to be done whilst rendering. pass in NULL as the
color_modifier to disable the color modifier for rendering.

=head2 C<Imlib2::ColorModifier $color_modifier = context_get_color_modifier()>

Returns:
=item $color_modifier - The current color modifier.

Returns the current color modifier being used.

=head2 C<context_set_operation(OperationMode $operation)>

Parameters:
=item $operation - The current operation mode. 

When Imlib2 draws an image onto another or an image onto a drawable it
is able to do more than just blend the result on using the given alpha
channel of the image. It is also able to do saturating additive,
subtractive and a combination of the both (called reshade) rendering.
The default mode is OP_COPY. you can also set it to OP_ADD, OP_SUBTRACT
or OP_RESHADE. Use this function to set the rendering operation.

OP_COPY performs basic alpha blending: DST = (SRC * A) + (DST * (1 - A)).
OP_ADD does DST = DST + (SRC * A).
OP_SUBTRACT does DST = DST - (SRC * A).
OP_RESHADE does DST = DST + (((SRC - 0.5) / 2) * A).

=head2 C<OperationMode $operation = context_get_operation()>

Returns:
=item $operation - The current operation mode.

Returns the current operation mode.

=head2 C<font.context_set_font(Imlib2::Font $font)>

Parameters:
=item $font - Current font. 

Sets the current font to use when rendering text. you should load the
font first with load_font().

=head2 C<Imlib2::Font $font = context_get_font()>

Returns:
=item $font - The current font.

Returns the current font.

=head2 C<context_set_direction(TextDirection $text_direction)>

Parameters:
=item $text_direction - Text direction.

Sets the direction in which to draw text in terms of simple 90 degree
orientations or an arbitrary angle. The direction can be one of
TEXT_TO_RIGHT, TEXT_TO_LEFT, TEXT_TO_DOWN, TEXT_TO_UP or TEXT_TO_ANGLE.
The default is TEXT_TO_RIGHT. If you use TEXT_TO_ANGLE, you will also
have to set the angle with context_set_angle().

=head2 C<TextDirection $text_direction = context_get_direction()>

Returns:
=item $text_direction - The current direction of the text.

Returns the current direction to render text in.

=head2 C<context_set_angle(Rat $angle)>

Parameters:
=item $angle - Angle of the text strings.

Sets the angle at which text strings will be drawn if the text direction
has been set to TEXT_TO_ANGLE with context_set_direction().

=head2 C<Rat $angle = context_get_angle()>

Returns:
=item The current angle of the text strings.

Returns the current angle used to render text at if the direction is
TEXT_TO_ANGLE.

=head2 C<context_set_color(red => 127, green => 255, blue => 127, alpha => 255)>

Parameters:
=item red - Red channel of the current color.
=item green - Green channel of the current color.
=item blue - Blue channel of the current color.
=item alpha - Alpha channel of the current color.

Sets the color with which text, lines and rectangles are drawn when
being rendered onto an image. Values for red, green, blue and alpha
are between 0 and 255 - any other values have undefined results.

=head2 C<context_set_color($hex_color, $alpha)>

Parameters:
=item $hex_color - The hexadecimal color code ("#FF00FF").
=item $alpha - Alpha channel of the current color.

Alternative function for the context_set_color(Named Arguments) function.

=head2 C<context_get_color(%color_channels)>

Parameters:
=item %color_channels - Hash passed as argument.

Set the current color for rendering text, rectangles and lines.

%color_channels{'red'} - Red channel of the current color.
%color_channels{'green'} - Green channel of the current color.
%color_channels{'blue'} - Blue channel of the current color.
%color_channels{'alpha'} - Alpha channel of the current color.
%color_channels{'hexcode'} - Hexadecimal code of the current color.

=head2 C<%color_channels = context_get_color()>

Returns:
=item %color_channels - Hash with the channels and a hexcode of the current colors. 

Returns the current color for rendering text, rectangles and lines.

%color_channels{'red'} - Red channel of the current color.
%color_channels{'green'} - Green channel of the current color.
%color_channels{'blue'} - Blue channel of the current color.
%color_channels{'alpha'} - Alpha channel of the current color.
%color_channels{'hexcode'} - Hexadecimal code of the current color.

=head1 AUTHOR

Henrique Dias - L<mrhdias@mail.com>

=head1 SEE ALSO

Imlib2 Library Documentation L<http://docs.enlightenment.org/api/imlib2/html/>

=head1 LICENSE

This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

